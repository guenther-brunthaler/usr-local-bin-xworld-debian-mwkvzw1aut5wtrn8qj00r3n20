#! /bin/sh
exit_version() {
	cat << EOF; exit
$APPLICATION_NAME Version 2017.212

Copyright (c) 2017 Guenther Brunthaler. All rights reserved.

This script file is free software.
Distribution is permitted under the terms of the GPLv3.
EOF
}
APPLICATION_NAME=${0##*/}

set -e
trap 'test $? = 0 || echo "$0 failed!" >& 2' 0

exit_help() {
	cat << EOF; echo; exit_version # Line width: 66
$APPLICATION_NAME - show download sizes for APT packages

Usage: $APPLICATION_NAME [ <options> ] [<pkg_grp1> <pkg_grp2> ...]

where <pkg_grp1> ... are groups consisting of either a single
installation package name or multiple package names (as one
argument per group, the names within the argument separated by
spaces).

It is also possible to specify the names of executables instead
of package names, but only if that executable is locally
installed as part of some package and does not have the same name
as an existing package. That is, package names are considered
first, and executable names only as a fallback if no package with
that name exists.

$APPLICATION_NAME will then calculate the combined download size
for every group and display the result in multiple lines, one
line per group. The lines will be sorted by group size.

Each group, whether containing just a single package or multiple
packages, must be specified as an individual argument to
$APPLICATION_NAME. This means that groups containing more than
one package must be enclosed within quotation marks.

Alternatively, the groups can also be read from a file rather
than taken from the program's arguments.

This mode is automatically enabled when no arguments have been
specified; $APPLICATION_NAME reads then a list of package groups
from standard input, one group per line. Within each line, the
packages within a group must be separated by a space. In this
case, no enclosing in quotation marks is necessary or allowed.

Options:

-b: Display all values exactly in bytes rather than kB, MB, GB
    etc.
-B: Use binary units like KiB and MiB in the output, rather than
    decimal units like kB and MB (decimal units are the default).
-F <digits>: The number of fractional digits to use for
    displaying the package size totals. A value of 0 is allowed.
    Has no effect if option -b is also used.
-i: Honor already-installed packages. This means such packages
    will not be included in the shown download sizes. Use this
    option if you want to know what the installation of a group
    would download NOW for the local machine.
-c: Honor the download cache. Packages which are not installed,
    but have already been downloaded, are excluded from the shown
    download sizes. Specifying both options -i and -c give the
    best estimate of actual downloads required for installing a
    package group on the local machine in its current state.
-d: Include the download sizes of all mandatory installation
    dependencies in the group size calculation. Note that this
    will include *everything* down to the C library and X server
    if needed, and will therefore be *much* larger than the
    download sizes of the requested packages allone. It will also
    take *much* longer to calculate. However, this option allows
    one to determine how fat an application actually is, and what
    would need to be downloaded for a given package group on a
    minimalistic system where nothing (except for kernel and
    bootloader) has been installed yet.
-r: Include recommended packages by each package group in the
    download size. By default, recommended packages are not
    automatically included.
-s: Include suggested packages by each package group in the
    download size. By default, suggested packages are not
    automatically included.
-I: Show (approximate) installation sizes rather than download
    sizes. This value is taken from the package descriptions and
    will always be an estimate, because the actually required
    storage space depends on the filesystem overhead, which in
    turn depends on the file system type, cluster size and other
    factors.
-h: Display this help.
-V: Display version of $APPLICATION_NAME and exit.
EOF
}

include_all_dependencies=false
include_recommended=false
include_suggested=false
DEBUG=false
use_binary_units=false
units_are_bytes=false
honor_already_installed=false
honor_download_cache=false
fractional_digits=2
show_installation_sizes=false
while getopts IF:ciBbDrsdhV opt
do
	case $opt in
		I) show_installation_sizes=true;;
		F) fractional_digits=$OPTARG;;
		c) honor_download_cache=true;;
		i) honor_already_installed=true;;
		b) units_are_bytes=true;;
		B) use_binary_units=true;;
		D) DEBUG=true;;
		r) include_recommended=true;;
		s) include_suggested=true;;
		d) include_all_dependencies=true;;
		h) exit_help;;
		V) exit_version;;
		*) false || exit
	esac
done
shift `expr $OPTIND - 1 || :`

expr x"$fractional_digits" : x'[1-9][0-9]*$' \
	\| x"$fractional_digits" : x'0$' > /dev/null
decimal_point=
if test $fractional_digits != 0
then
	eval `locale -k LC_NUMERIC | grep ^decimal_point=` 2> /dev/null || :
	: ${decimal_point:="."}
fi
fractional_pic=`printf '%*s' $fractional_digits '' | tr -c '?' '?'`

b2i() {
	$1 && echo 1 || echo 0
}

installed_bytes() {
	# Units are actually kibibytes. Older Debian documentation still says
	# "kilobytes" because historically kilobytes *were* kibibytes.
	expr `
		apt-cache show -- "$@" | sed '
			s/^Installed-Size:[[:space:]]*//; t done
			d
			: done
			q
		'
	` \* 1024
}

process_group() {
	local n ok p
	printf '%s: ' "$*"
	# Verify that all packages exist. Replace executables by
	# package names otherwise.
	n=$#; ok=true
	while test $n != 0
	do
		if apt-cache show -- "$1" > /dev/null 2>& 1
		then
			set -- "$@" "$1"; shift
		else
			case $1 in
				*/*) p=$1;;
				*) p=`command -v -- "$1"`
			esac
			if
				p=`readlink -f -- "$p"` \
				&& test -f "$p" && test -x "$p" \
				&& p=`dpkg -S -- "$p" 2> /dev/null` \
				&& test "${p%:*}" != "$p" \
				&& p=${p%:*} && test "$p"
			then
				set -- "$@" "$p"; shift
			else
				echo "'$1' is neither a package name nor a" \
					"locally installed excutable" \
					"(that could be found via \$PATH)!" \
					>& 2
				ok=false
			fi
		fi
		n=`expr $n - 1 || :`
	done
	$ok || exit
	# Build apt-get command line, starting from behind.
	set -- -qq -- "$@"
	if $show_installation_sizes
	then
		set -- --simulate "$@"
	else
		set -- --print-uris "$@"
	fi
	if $honor_download_cache
	then
		:
	else
		# Make apt-get think there are no downloaded files yet.
		set -- -o Dir::Cache::archives=/var/empty/ "$@"
	fi
	if $honor_already_installed
	then
		:
	elif $include_all_dependencies
	then
		# Make apt-get forget that many packages are already
		# installed.
		set -- -o Dir::State::status=/dev/null "$@"
	fi
	set -- -o APT::Install-Suggests=`b2i $include_suggested` "$@"
	set -- -o APT::Install-Recommends=`b2i $include_recommended` "$@"
	if $honor_already_installed
	then
		:
	else
		set -- --reinstall "$@"
	fi
	set -- --download-only "$@"
	set apt-get install "$@"
	if $DEBUG
	then
		local line arg
		line=
		for arg
		do
			case $arg in
				*" "*) arg="'$arg'"
			esac
			line=$line${line:+ }$arg
		done
		echo "$line" >& 2
		return
	fi
	"$@" | if $show_installation_sizes
	then
		grep ^Inst | cut -d ' ' -f 2 | {
			s=0
			while IFS= read line
			do
				bytes=`installed_bytes "$line"`
				s=`expr $s + $bytes`
			done
			echo $s
		}
	else
		{
			s=0
			while IFS= read line
			do
				eval 'set -- $line'
				s=`expr $s + $3`
			done
			echo $s
		}
	fi
}

bullet_point() {
	local target_line_width first_prefix rest_prefix fold_width \
		prefix_width
	target_line_width=66
	first_prefix='* '
	prefix_width=${#first_prefix}
	rest_prefix=`printf '%*s:' $prefix_width ''`
	rest_prefix=${rest_prefix%:}
	# "fold -s" breaks *after' spaces.
	fold_width=`expr $target_line_width - $prefix_width + 1`
	printf '%s\n' "$*" | fold -sw $fold_width \
	| while IFS= read -r line
	do
		printf '%s%s\n' "$first_prefix" "${line%" "}"
		first_prefix=$rest_prefix
	done
	echo
}

idownld=`$show_installation_sizes && echo installation || echo download`
t="Package group $idownld sizes, sorted by group totals"
echo "$t"; printf '%*s' ${#t} '' | tr -c = =; echo; echo
if $include_recommended
then
	bullet_point \
		"The $idownld sizes of all recommended packages are" \
		"included for each package group."

elif $include_suggested
then
	:
else
	bullet_point \
		"Only the $idownld sizes for the shown package groups are" \
		"included - recommended and suggested packages have not" \
		"been automatically included."
fi
if $include_suggested
then
	bullet_point \
		"The $idownld sizes of all suggested packages are included" \
		"for each package group."
fi
if $include_all_dependencies
then
	bullet_point \
		"The $idownld sizes of all packages directly or indirectly" \
		"required by the resulting list of packages are also" \
		"included for each package group."
fi
if $honor_already_installed
then
	bullet_point \
		"Packages which are already installed on the local machine" \
		"are excluded from the displayed $idownld sizes."
fi
if $honor_download_cache
then
	bullet_point \
		"Packages for which the installation files have already" \
		"been downloaded to the local download cache are excluded" \
		"from the displayed $idownld sizes. It does not matter" \
		"whether they are actually installed or not."
fi
if test $# = 0
then
	while IFS= read -r line
	do
		process_group $line
	done
else
	for line
	do
		process_group $line
	done
fi | sort -t : -nk2 | while IFS= read -r line
do
	bytes=`expr x"$line" : x'.*\(: [0-9]\{1,\}\)$'`
	bytes=${bytes#": "}; line=${line%"$bytes"}
	multiples=`$use_binary_units && echo 1024 || echo 1000`
	limit=$multiples
	divisor=1
	unset last_unit
	for unit in bytes K M G T P E Z ${last_unit=Y}
	do
		if test $unit != bytes
		then
			case $unit=$use_binary_units in
				K=false) unit=k
			esac
			$use_binary_units && unit=${unit}i
			unit=${unit}B
		fi
		# coeff = floor(bytes / divisor + 0.5)
		coeff=`
			expr \( $bytes \* 2 + $divisor \) \
				/ \( $divisor \* 2  \) || :
		`
		if
			$units_are_bytes || test $unit = $last_unit \
			|| test $coeff -lt $limit
		then
			if test $unit != bytes
			then
				leading=${coeff%$fractional_pic}
				fractional=${coeff#$leading}
				bytes=$leading$decimal_point$fractional
			fi
			bytes="$bytes $unit"
			break
		fi
		if test $unit = bytes
		then
			for fr in `seq $fractional_digits`
			do
				limit=`expr $limit \* 10`
				bytes=`expr $bytes \* 10 || :`
			done
		fi
		divisor=`expr $divisor \* $multiples`
	done
	printf '%s\n' "$line$bytes"
done
